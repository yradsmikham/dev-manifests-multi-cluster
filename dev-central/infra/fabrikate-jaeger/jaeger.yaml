---
apiVersion: v1
data:
  elasticsearch.yml: |-
    cluster.name: tracing

    node.data: ${NODE_DATA:true}
    node.master: ${NODE_MASTER:true}
    node.ingest: ${NODE_INGEST:true}
    node.name: ${HOSTNAME}

    network.host: 0.0.0.0
    # see https://github.com/kubernetes/kubernetes/issues/3595
    bootstrap.memory_lock: ${BOOTSTRAP_MEMORY_LOCK:false}

    discovery:
      zen:
        ping.unicast.hosts: ${DISCOVERY_SERVICE:}
        minimum_master_nodes: ${MINIMUM_MASTER_NODES:2}

    # see https://github.com/elastic/elasticsearch-definitive-guide/pull/679
    processors: ${PROCESSORS:}

    # avoid split-brain w/ a minimum consensus of two masters plus a data node
    gateway.expected_master_nodes: ${EXPECTED_MASTER_NODES:2}
    gateway.expected_data_nodes: ${EXPECTED_DATA_NODES:1}
    gateway.recover_after_time: ${RECOVER_AFTER_TIME:5m}
    gateway.recover_after_master_nodes: ${RECOVER_AFTER_MASTER_NODES:2}
    gateway.recover_after_data_nodes: ${RECOVER_AFTER_DATA_NODES:1}
  log4j2.properties: |-
    status = error
    appender.console.type = Console
    appender.console.name = console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n
    rootLogger.level = info
    rootLogger.appenderRef.console.ref = console
    logger.searchguard.name = com.floragunn
    logger.searchguard.level = info
  post-start-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    CLUSTER_SETTINGS=$(curl -s -XGET "http://jaeger-elasticsearch-client:9200/_cluster/settings")
    if echo "${CLUSTER_SETTINGS}" | grep -E "${NODE_NAME}"; then
      echo "Activate node ${NODE_NAME}"
      curl -s -XPUT -H 'Content-Type: application/json' "http://jaeger-elasticsearch-client:9200/_cluster/settings" -d "{
        \"transient\" :{
            \"cluster.routing.allocation.exclude._name\" : null
        }
      }"
    fi
    echo "Node ${NODE_NAME} is ready to be used"
  pre-stop-hook.sh: |-
    #!/bin/bash
    exec &> >(tee -a "/var/log/elasticsearch-hooks.log")
    NODE_NAME=${HOSTNAME}
    echo "Prepare to migrate data of the node ${NODE_NAME}"
    echo "Move all data from node ${NODE_NAME}"
    curl -s -XPUT -H 'Content-Type: application/json' 'jaeger-elasticsearch-client:9200/_cluster/settings' -d "{
      \"transient\" :{
          \"cluster.routing.allocation.exclude._name\" : \"${NODE_NAME}\"
      }
    }"
    echo ""

    while true ; do
      echo -e "Wait for node ${NODE_NAME} to become empty"
      SHARDS_ALLOCATION=$(curl -s -XGET 'http://jaeger-elasticsearch-client:9200/_cat/shards')
      if ! echo "${SHARDS_ALLOCATION}" | grep -E "${NODE_NAME}"; then
        break
      fi
      sleep 1
    done
    echo "Node ${NODE_NAME} is ready to shutdown"
kind: ConfigMap
metadata:
  labels:
    app: jaeger-elasticsearch
    chart: elasticsearch-1.21.2
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch
  namespace: jaeger

---
apiVersion: v1
data:
  cassandra.contact-points: cassandra:9042
  cassandra.datacenter.name: dc1
  cassandra.keyspace: jaeger_v1_dc1
  cassandra.port: "9042"
  cassandra.schema.mode: prod
  cassandra.servers: cassandra
  collector.host-port: jaeger-collector:14267
  collector.http-port: "14268"
  collector.port: "14267"
  collector.zipkin.http-port: "9411"
  es.nodes-wan-only: "false"
  es.password: changeme
  es.server-urls: http://jaeger-elasticsearch-client:9200
  es.username: elastic
  hotrod.agent-host: jaeger-agent
  hotrod.agent-port: "6831"
  query.base-path: /
  query.health-check-http-port: "16687"
  query.port: "16686"
  span-storage.type: elasticsearch
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger
  namespace: jaeger

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: client
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-client
  namespace: jaeger

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: data
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-data
  namespace: jaeger

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: master
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-master
  namespace: jaeger

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: client
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-client
  namespace: jaeger
spec:
  ports:
  - name: http
    port: 9200
    targetPort: http
  selector:
    app: elasticsearch
    component: client
    release: jaeger
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: master
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-discovery
  namespace: jaeger
spec:
  clusterIP: None
  ports:
  - port: 9300
    targetPort: transport
  selector:
    app: elasticsearch
    component: master
    release: jaeger

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-agent
  namespace: jaeger
spec:
  ports:
  - name: agent-zipkin-thrift
    port: 5775
    protocol: UDP
    targetPort: 5775
  - name: agent-compact
    port: 6831
    protocol: UDP
    targetPort: 6831
  - name: agent-binary
    port: 6832
    protocol: UDP
    targetPort: 6832
  - name: agent-sampling
    port: 5778
    protocol: TCP
    targetPort: 5778
  selector:
    app.kubernetes.io/component: agent
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/name: jaeger
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: collector
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-collector
  namespace: jaeger
spec:
  ports:
  - name: jaeger-collector-tchannel
    port: 14267
    protocol: TCP
    targetPort: tchannel
  - name: jaeger-collector-http
    port: 14268
    protocol: TCP
    targetPort: http
  - name: jaeger-collector-zipkin
    port: 9411
    protocol: TCP
    targetPort: zipkin
  selector:
    app.kubernetes.io/component: collector
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/name: jaeger
  type: ClusterIP

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: query
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-query
  namespace: jaeger
spec:
  ports:
  - name: jaeger-query
    port: 80
    protocol: TCP
    targetPort: 16686
  selector:
    app.kubernetes.io/component: query
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/name: jaeger
  type: ClusterIP

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/component: agent
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-agent
  namespace: jaeger
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: agent
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/name: jaeger
  template:
    metadata:
      labels:
        app.kubernetes.io/component: agent
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/name: jaeger
    spec:
      containers:
      - env:
        - name: COLLECTOR_HOST_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.host-port
              name: jaeger
        image: jaegertracing/jaeger-agent:1.10.0
        imagePullPolicy: IfNotPresent
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        - containerPort: 5778
          protocol: TCP
        resources: {}
      dnsPolicy: ClusterFirst
      nodeSelector: {}

---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: client
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-client
  namespace: jaeger
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: elasticsearch
        component: client
        release: jaeger
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: client
                  release: jaeger
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: NODE_DATA
          value: "false"
        - name: NODE_MASTER
          value: "false"
        - name: DISCOVERY_SERVICE
          value: jaeger-elasticsearch-discovery
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: '-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  '
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 90
        name: elasticsearch
        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 512Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox:latest
        imagePullPolicy: Always
        name: sysctl
        resources: {}
        securityContext:
          privileged: true
      securityContext:
        fsGroup: 1000
      serviceAccountName: jaeger-elasticsearch-client
      volumes:
      - configMap:
          name: jaeger-elasticsearch
        name: config

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: collector
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-collector
  namespace: jaeger
spec:
  replicas: 5
  selector:
    matchLabels:
      app.kubernetes.io/component: collector
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/name: jaeger
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: collector
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/name: jaeger
    spec:
      containers:
      - env:
        - name: SPAN_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              key: span-storage.type
              name: jaeger
        - name: ES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: es.password
              name: jaeger
        - name: ES_SERVER_URLS
          valueFrom:
            configMapKeyRef:
              key: es.server-urls
              name: jaeger
        - name: ES_USERNAME
          valueFrom:
            configMapKeyRef:
              key: es.username
              name: jaeger
        - name: COLLECTOR_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.port
              name: jaeger
        - name: COLLECTOR_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.http-port
              name: jaeger
        - name: COLLECTOR_ZIPKIN_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: collector.zipkin.http-port
              name: jaeger
        image: jaegertracing/jaeger-collector:1.10.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            port: healthcheck
          initialDelaySeconds: 10
        name: jaeger-collector
        ports:
        - containerPort: 14267
          name: tchannel
          protocol: TCP
        - containerPort: 14268
          name: http
          protocol: TCP
        - containerPort: 14269
          name: healthcheck
          protocol: TCP
        - containerPort: 9411
          name: zipkin
          protocol: TCP
        readinessProbe:
          httpGet:
            port: healthcheck
          initialDelaySeconds: 10
        resources: {}
      dnsPolicy: ClusterFirst
      nodeSelector: {}
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: query
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-query
  namespace: jaeger
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/component: query
      app.kubernetes.io/instance: jaeger
      app.kubernetes.io/name: jaeger
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: query
        app.kubernetes.io/instance: jaeger
        app.kubernetes.io/name: jaeger
    spec:
      containers:
      - env:
        - name: SPAN_STORAGE_TYPE
          valueFrom:
            configMapKeyRef:
              key: span-storage.type
              name: jaeger
        - name: ES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: es.password
              name: jaeger
        - name: ES_SERVER_URLS
          valueFrom:
            configMapKeyRef:
              key: es.server-urls
              name: jaeger
        - name: ES_USERNAME
          valueFrom:
            configMapKeyRef:
              key: es.username
              name: jaeger
        - name: QUERY_PORT
          valueFrom:
            configMapKeyRef:
              key: query.port
              name: jaeger
        - name: QUERY_HEALTH_CHECK_HTTP_PORT
          valueFrom:
            configMapKeyRef:
              key: query.health-check-http-port
              name: jaeger
        - name: QUERY_BASE_PATH
          valueFrom:
            configMapKeyRef:
              key: query.base-path
              name: jaeger
        image: jaegertracing/jaeger-query:1.10.0
        imagePullPolicy: IfNotPresent
        name: jaeger-query
        ports:
        - containerPort: 16686
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 16687
        resources: {}
      dnsPolicy: ClusterFirst
      nodeSelector: {}
      restartPolicy: Always

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: data
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-data
  namespace: jaeger
spec:
  replicas: 2
  serviceName: jaeger-elasticsearch-data
  template:
    metadata:
      labels:
        app: elasticsearch
        component: data
        release: jaeger
        role: data
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: data
                  release: jaeger
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: DISCOVERY_SERVICE
          value: jaeger-elasticsearch-discovery
        - name: NODE_MASTER
          value: "false"
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: '-Djava.net.preferIPv4Stack=true -Xms1536m -Xmx1536m  '
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/bash
              - /post-start-hook.sh
          preStop:
            exec:
              command:
              - /bin/bash
              - /pre-stop-hook.sh
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 1536Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
        - mountPath: /pre-stop-hook.sh
          name: config
          subPath: pre-stop-hook.sh
        - mountPath: /post-start-hook.sh
          name: config
          subPath: post-start-hook.sh
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox:latest
        imagePullPolicy: Always
        name: sysctl
        resources: {}
        securityContext:
          privileged: true
      - command:
        - /bin/bash
        - -c
        - |
          set -e; set -x; chown elasticsearch:elasticsearch /usr/share/elasticsearch/data; for datadir in $(find /usr/share/elasticsearch/data -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $datadir;
          done; chown elasticsearch:elasticsearch /usr/share/elasticsearch/logs; for logfile in $(find /usr/share/elasticsearch/logs -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $logfile;
          done
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6
        imagePullPolicy: IfNotPresent
        name: chown
        resources: {}
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
      securityContext:
        fsGroup: 1000
      serviceAccountName: jaeger-elasticsearch-data
      terminationGracePeriodSeconds: 3600
      volumes:
      - configMap:
          name: jaeger-elasticsearch
        name: config
      - emptyDir: {}
        name: data
  updateStrategy:
    type: OnDelete

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  labels:
    app: elasticsearch
    chart: elasticsearch-1.21.2
    component: master
    heritage: Tiller
    release: jaeger
  name: jaeger-elasticsearch-master
  namespace: jaeger
spec:
  replicas: 3
  serviceName: jaeger-elasticsearch-master
  template:
    metadata:
      labels:
        app: elasticsearch
        component: master
        release: jaeger
        role: master
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: elasticsearch
                  component: master
                  release: jaeger
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
      - env:
        - name: NODE_DATA
          value: "false"
        - name: DISCOVERY_SERVICE
          value: jaeger-elasticsearch-discovery
        - name: PROCESSORS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: ES_JAVA_OPTS
          value: '-Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m  '
        - name: MINIMUM_MASTER_NODES
          value: "2"
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9300
          name: transport
        readinessProbe:
          httpGet:
            path: /_cluster/health?local=true
            port: 9200
          initialDelaySeconds: 5
        resources:
          limits:
            cpu: "1"
          requests:
            cpu: 25m
            memory: 512Mi
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
        - mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          name: config
          subPath: elasticsearch.yml
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: busybox:latest
        imagePullPolicy: Always
        name: sysctl
        resources: {}
        securityContext:
          privileged: true
      - command:
        - /bin/bash
        - -c
        - |
          set -e; set -x; chown elasticsearch:elasticsearch /usr/share/elasticsearch/data; for datadir in $(find /usr/share/elasticsearch/data -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $datadir;
          done; chown elasticsearch:elasticsearch /usr/share/elasticsearch/logs; for logfile in $(find /usr/share/elasticsearch/logs -mindepth 1 -maxdepth 1 -not -name ".snapshot"); do
            chown -R elasticsearch:elasticsearch $logfile;
          done
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.6
        imagePullPolicy: IfNotPresent
        name: chown
        resources: {}
        securityContext:
          runAsUser: 0
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: data
      securityContext:
        fsGroup: 1000
      serviceAccountName: jaeger-elasticsearch-master
      volumes:
      - configMap:
          name: jaeger-elasticsearch
        name: config
  updateStrategy:
    type: OnDelete
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 4Gi

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/component: spark
    app.kubernetes.io/instance: jaeger
    app.kubernetes.io/managed-by: Tiller
    app.kubernetes.io/name: jaeger
    helm.sh/chart: jaeger-0.9.0
  name: jaeger-spark
  namespace: jaeger
spec:
  failedJobsHistoryLimit: 5
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/component: spark
            app.kubernetes.io/instance: jaeger
            app.kubernetes.io/name: jaeger
        spec:
          containers:
          - env:
            - name: STORAGE
              valueFrom:
                configMapKeyRef:
                  key: span-storage.type
                  name: jaeger
            - name: ES_NODES
              valueFrom:
                configMapKeyRef:
                  key: es.server-urls
                  name: jaeger
            - name: ES_NODES_WAN_ONLY
              valueFrom:
                configMapKeyRef:
                  key: es.nodes-wan-only
                  name: jaeger
            - name: ES_PASSWORD
              valueFrom:
                configMapKeyRef:
                  key: es.password
                  name: jaeger
            - name: ES_USERNAME
              valueFrom:
                configMapKeyRef:
                  key: es.username
                  name: jaeger
            image: jaegertracing/spark-dependencies:latest
            imagePullPolicy: Always
            name: jaeger-spark
            resources: {}
          nodeSelector: {}
          restartPolicy: OnFailure
  schedule: 49 23 * * *
  successfulJobsHistoryLimit: 5

